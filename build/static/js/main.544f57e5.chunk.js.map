{"version":3,"sources":["components/Contacts.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contacts","id","name","email","phone","react_default","a","createElement","map","contact","Component","Header","props","branding","className","href","defaultProps","App","components_Header","components_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LA6CeA,cAzCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,SAAU,CACN,CACIC,GAAI,EACJC,KAAM,WACNC,MAAO,iBACPC,MAAO,gBAEX,CACIH,GAAI,EACJC,KAAM,iBACNC,MAAO,kBACPC,MAAO,gBAEX,CACIH,GAAI,EACJC,KAAM,gBACNC,MAAO,kBACPC,MAAO,kBApBTZ,wEA2BL,IAEGQ,EAAaL,KAAKI,MAAlBC,SAER,OACIK,EAAAC,EAAAC,cAAA,WACKP,EAASQ,IAAI,SAAAC,GAAO,OACjBJ,EAAAC,EAAAC,cAAA,UAAKE,EAAQP,gBApCVQ,aCEjBC,EAAS,SAACC,GAAU,IACdC,EAAaD,EAAbC,SACR,OACGR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,2DACXT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACXT,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAID,UAAU,gBACjBD,GAELR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIO,UAAU,sBACVT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,YACVT,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAID,UAAU,YAAtB,cAW3BH,EAAOK,aAAe,CAClBH,SAAU,UAOCF,QCdAM,gMAXX,OACEZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACW,EAAD,CAAQL,SAAS,oBACfR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAACY,EAAD,eANMT,cCGEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.544f57e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Contacts extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            contacts: [\r\n                {\r\n                    id: 1,\r\n                    name: 'John Doe',\r\n                    email: 'jdoe@gmail.com',\r\n                    phone: '555-555-5555'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Karen Williams',\r\n                    email: 'karen@gmail.com',\r\n                    phone: '222-222-2222'\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: 'Henry Johnson',\r\n                    email: 'henry@gmail.com',\r\n                    phone: '111-111-1111'\r\n                }\r\n\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { contacts } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {contacts.map(contact => (\r\n                    <h1>{contact.name}</h1>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n       <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n           <div className=\"container\">\r\n               <a href=\"/\" className=\"navbar-brand\">\r\n                   {branding}\r\n               </a>\r\n               <div>\r\n                   <ul className=\"navbar-nav mr-auto\">\r\n                       <li className=\"nav-item\">\r\n                           <a href=\"/\" className=\"nav-link\">\r\n                               Home\r\n                           </a>\r\n                       </li>\r\n                   </ul>\r\n               </div>\r\n           </div>\r\n       </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Contacts from './components/Contacts';\nimport Header from \"./components/Header\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\"/>\n          <div className=\"container\">\n            <Contacts/>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}